# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:58:32+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class AccessToken(BaseModel):
    access_token: Optional[str] = None
    account_id: Optional[int] = None
    expires_on_date: Optional[int] = None
    scope: Optional[List] = None


class AccessTokens(RootModel[List[AccessToken]]):
    root: List[AccessToken]


class AccountMergeItem(BaseModel):
    merge_date: Optional[int] = None
    new_account_id: Optional[int] = None
    old_account_id: Optional[int] = None


class AccountMerge(RootModel[List[AccountMergeItem]]):
    root: List[AccountMergeItem]


class BadgeCounts(BaseModel):
    bronze: Optional[int] = None
    gold: Optional[int] = None
    silver: Optional[int] = None


class LastEditor(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Owner(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Answer(BaseModel):
    accepted: Optional[bool] = None
    answer_id: Optional[int] = None
    awarded_bounty_amount: Optional[int] = None
    awarded_bounty_users: Optional[List] = None
    body: Optional[str] = None
    body_markdown: Optional[str] = None
    can_flag: Optional[bool] = None
    comment_count: Optional[int] = None
    comments: Optional[List] = None
    community_owned_date: Optional[int] = None
    creation_date: Optional[int] = None
    down_vote_count: Optional[int] = None
    downvoted: Optional[bool] = None
    is_accepted: Optional[bool] = None
    last_activity_date: Optional[int] = None
    last_edit_date: Optional[int] = None
    last_editor: Optional[LastEditor] = None
    link: Optional[str] = None
    locked_date: Optional[int] = None
    owner: Optional[Owner] = None
    question_id: Optional[int] = None
    score: Optional[int] = None
    share_link: Optional[str] = None
    tags: Optional[List] = None
    title: Optional[str] = None
    up_vote_count: Optional[int] = None
    upvoted: Optional[bool] = None


class Answers(RootModel[List[Answer]]):
    root: List[Answer]


class User(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Badge(BaseModel):
    award_count: Optional[int] = None
    badge_id: Optional[int] = None
    badge_type: Optional[str] = None
    description: Optional[str] = None
    link: Optional[str] = None
    name: Optional[str] = None
    rank: Optional[str] = None
    user: Optional[User] = None


class Badges(RootModel[List[Badge]]):
    root: List[Badge]


class Owner1(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class ReplyToUser(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Comment(BaseModel):
    body: Optional[str] = None
    body_markdown: Optional[str] = None
    can_flag: Optional[bool] = None
    comment_id: Optional[int] = None
    creation_date: Optional[int] = None
    edited: Optional[bool] = None
    link: Optional[str] = None
    owner: Optional[Owner1] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    reply_to_user: Optional[ReplyToUser] = None
    score: Optional[int] = None
    upvoted: Optional[bool] = None


class Comments(RootModel[List[Comment]]):
    root: List[Comment]


class Owner2(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class ReplyToUser1(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class CreatedComment(BaseModel):
    body: Optional[str] = None
    body_markdown: Optional[str] = None
    can_flag: Optional[bool] = None
    comment_id: Optional[int] = None
    creation_date: Optional[int] = None
    edited: Optional[bool] = None
    link: Optional[str] = None
    owner: Optional[Owner2] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    reply_to_user: Optional[ReplyToUser1] = None
    score: Optional[int] = None
    upvoted: Optional[bool] = None


class Error(BaseModel):
    error_id: Optional[float] = None
    error_message: Optional[str] = None
    error_name: Optional[str] = None


class Error1(BaseModel):
    description: Optional[str] = None
    error_id: Optional[int] = None
    error_name: Optional[str] = None


class Errors(RootModel[List[Error1]]):
    root: List[Error1]


class Event(BaseModel):
    creation_date: Optional[int] = None
    event_type: Optional[str] = None
    excerpt: Optional[str] = None
    link: Optional[str] = None
    the_id_of_the_object__answer__comment__question__or_user__the_event_describes: (
        Optional[int]
    ) = Field(
        None,
        alias='the id of the object (answer, comment, question, or user) the event describes',
    )


class Events(RootModel[List[Event]]):
    root: List[Event]


class Filter(BaseModel):
    filter: Optional[str] = None
    filter_type: Optional[str] = None
    included_fields: Optional[List] = None


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class Styling(BaseModel):
    link_color: Optional[str] = None
    tag_background_color: Optional[str] = None
    tag_foreground_color: Optional[str] = None


class Site(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class InboxItem(BaseModel):
    answer_id: Optional[int] = None
    body: Optional[str] = None
    comment_id: Optional[int] = None
    creation_date: Optional[int] = None
    is_unread: Optional[bool] = None
    item_type: Optional[str] = None
    link: Optional[str] = None
    question_id: Optional[int] = None
    site: Optional[Site] = None
    title: Optional[str] = None


class InboxItems(RootModel[List[InboxItem]]):
    root: List[InboxItem]


class Site1(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class InfoObject(BaseModel):
    answers_per_minute: Optional[float] = None
    api_revision: Optional[str] = None
    badges_per_minute: Optional[float] = None
    new_active_users: Optional[int] = None
    questions_per_minute: Optional[float] = None
    site: Optional[Site1] = None
    total_accepted: Optional[int] = None
    total_answers: Optional[int] = None
    total_badges: Optional[int] = None
    total_comments: Optional[int] = None
    total_questions: Optional[int] = None
    total_unanswered: Optional[int] = None
    total_users: Optional[int] = None
    total_votes: Optional[int] = None


class NetworkUser(BaseModel):
    account_id: Optional[int] = None
    answer_count: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    creation_date: Optional[int] = None
    last_access_date: Optional[int] = None
    question_count: Optional[int] = None
    reputation: Optional[int] = None
    site_name: Optional[str] = None
    site_url: Optional[str] = None
    top_answers: Optional[List] = None
    top_questions: Optional[List] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class NetworkUsers(RootModel[List[NetworkUser]]):
    root: List[NetworkUser]


class Site2(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class Notification(BaseModel):
    body: Optional[str] = None
    creation_date: Optional[int] = None
    is_unread: Optional[bool] = None
    notification_type: Optional[str] = None
    post_id: Optional[int] = None
    site: Optional[Site2] = None


class Notifications(RootModel[List[Notification]]):
    root: List[Notification]


class LastEditor1(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Owner3(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Post(BaseModel):
    body: Optional[str] = None
    body_markdown: Optional[str] = None
    comment_count: Optional[int] = None
    comments: Optional[List] = None
    creation_date: Optional[int] = None
    down_vote_count: Optional[int] = None
    downvoted: Optional[bool] = None
    last_activity_date: Optional[int] = None
    last_edit_date: Optional[int] = None
    last_editor: Optional[LastEditor1] = None
    link: Optional[str] = None
    owner: Optional[Owner3] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    score: Optional[int] = None
    share_link: Optional[str] = None
    title: Optional[str] = None
    up_vote_count: Optional[int] = None
    upvoted: Optional[bool] = None


class Posts(RootModel[List[Post]]):
    root: List[Post]


class Privilege(BaseModel):
    description: Optional[str] = None
    reputation: Optional[int] = None
    short_description: Optional[str] = None


class Privileges(RootModel[List[Privilege]]):
    root: List[Privilege]


class Owner4(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class User1(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class QuestionTimelineEvent(BaseModel):
    comment_id: Optional[int] = None
    creation_date: Optional[int] = None
    down_vote_count: Optional[int] = None
    owner: Optional[Owner4] = None
    post_id: Optional[int] = None
    question_id: Optional[int] = None
    revision_guid: Optional[str] = None
    timeline_type: Optional[str] = None
    up_vote_count: Optional[int] = None
    user: Optional[User1] = None


class QuestionTimelineEvents(RootModel[List[QuestionTimelineEvent]]):
    root: List[QuestionTimelineEvent]


class BountyUser(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class ClosedDetails(BaseModel):
    by_users: Optional[List] = None
    description: Optional[str] = None
    on_hold: Optional[bool] = None
    original_questions: Optional[List] = None
    reason: Optional[str] = None


class LastEditor2(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class OtherSite(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class MigratedFrom(BaseModel):
    on_date: Optional[int] = None
    other_site: Optional[OtherSite] = None
    question_id: Optional[int] = None


class OtherSite1(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class MigratedTo(BaseModel):
    on_date: Optional[int] = None
    other_site: Optional[OtherSite1] = None
    question_id: Optional[int] = None


class Notice(BaseModel):
    body: Optional[str] = None
    creation_date: Optional[int] = None
    owner_user_id: Optional[int] = None


class Owner5(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Question(BaseModel):
    accepted_answer_id: Optional[int] = None
    answer_count: Optional[int] = None
    answers: Optional[List] = None
    body: Optional[str] = None
    body_markdown: Optional[str] = None
    bounty_amount: Optional[int] = None
    bounty_closes_date: Optional[int] = None
    bounty_user: Optional[BountyUser] = None
    can_close: Optional[bool] = None
    can_flag: Optional[bool] = None
    close_vote_count: Optional[int] = None
    closed_date: Optional[int] = None
    closed_details: Optional[ClosedDetails] = None
    closed_reason: Optional[str] = None
    comment_count: Optional[int] = None
    comments: Optional[List] = None
    community_owned_date: Optional[int] = None
    creation_date: Optional[int] = None
    delete_vote_count: Optional[int] = None
    down_vote_count: Optional[int] = None
    downvoted: Optional[bool] = None
    favorite_count: Optional[int] = None
    favorited: Optional[bool] = None
    is_answered: Optional[bool] = None
    last_activity_date: Optional[int] = None
    last_edit_date: Optional[int] = None
    last_editor: Optional[LastEditor2] = None
    link: Optional[str] = None
    locked_date: Optional[int] = None
    migrated_from: Optional[MigratedFrom] = None
    migrated_to: Optional[MigratedTo] = None
    notice: Optional[Notice] = None
    owner: Optional[Owner5] = None
    protected_date: Optional[int] = None
    question_id: Optional[int] = None
    reopen_vote_count: Optional[int] = None
    score: Optional[int] = None
    share_link: Optional[str] = None
    tags: Optional[List] = None
    title: Optional[str] = None
    up_vote_count: Optional[int] = None
    upvoted: Optional[bool] = None
    view_count: Optional[int] = None


class Questions(RootModel[List[Question]]):
    root: List[Question]


class ReputationChange(BaseModel):
    link: Optional[str] = None
    on_date: Optional[int] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    reputation_change: Optional[int] = None
    title: Optional[str] = None
    user_id: Optional[int] = None
    vote_type: Optional[str] = None


class ReputationChanges(RootModel[List[ReputationChange]]):
    root: List[ReputationChange]


class ReputationHistoryItem(BaseModel):
    creation_date: Optional[int] = None
    post_id: Optional[int] = None
    reputation_change: Optional[int] = None
    reputation_history_type: Optional[str] = None
    user_id: Optional[int] = None


class ReputationHistory(RootModel[List[ReputationHistoryItem]]):
    root: List[ReputationHistoryItem]


class ReputationObject(BaseModel):
    link: Optional[str] = None
    on_date: Optional[int] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    reputation_change: Optional[int] = None
    title: Optional[str] = None
    user_id: Optional[int] = None
    vote_type: Optional[str] = None


class ReputationObjects(RootModel[List[ReputationObject]]):
    root: List[ReputationObject]


class User2(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class Revision(BaseModel):
    body: Optional[str] = None
    comment: Optional[str] = None
    creation_date: Optional[int] = None
    is_rollback: Optional[bool] = None
    last_body: Optional[str] = None
    last_tags: Optional[List] = None
    last_title: Optional[str] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    revision_guid: Optional[str] = None
    revision_number: Optional[int] = None
    revision_type: Optional[str] = None
    set_community_wiki: Optional[bool] = None
    tags: Optional[List] = None
    title: Optional[str] = None
    user: Optional[User2] = None


class Revisions(RootModel[List[Revision]]):
    root: List[Revision]


class SingleFilter(BaseModel):
    filter: Optional[str] = None
    filter_type: Optional[str] = None
    included_fields: Optional[List] = None


class Site3(BaseModel):
    aliases: Optional[List] = None
    api_site_parameter: Optional[str] = None
    audience: Optional[str] = None
    closed_beta_date: Optional[int] = None
    favicon_url: Optional[str] = None
    high_resolution_icon_url: Optional[str] = None
    icon_url: Optional[str] = None
    launch_date: Optional[int] = None
    logo_url: Optional[str] = None
    markdown_extensions: Optional[List] = None
    name: Optional[str] = None
    open_beta_date: Optional[int] = None
    related_sites: Optional[List] = None
    site_state: Optional[str] = None
    site_type: Optional[str] = None
    site_url: Optional[str] = None
    styling: Optional[Styling] = None
    twitter_account: Optional[str] = None


class Sites(RootModel[List[Site3]]):
    root: List[Site3]


class ProposingUser(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class SuggestedEdit(BaseModel):
    approval_date: Optional[int] = None
    body: Optional[str] = None
    comment: Optional[str] = None
    creation_date: Optional[int] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    proposing_user: Optional[ProposingUser] = None
    rejection_date: Optional[int] = None
    suggested_edit_id: Optional[int] = None
    tags: Optional[List] = None
    title: Optional[str] = None


class SuggestedEdits(RootModel[List[SuggestedEdit]]):
    root: List[SuggestedEdit]


class User3(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class TagScoreObject(BaseModel):
    post_count: Optional[int] = None
    score: Optional[int] = None
    user: Optional[User3] = None


class TagScoreObjects(RootModel[List[TagScoreObject]]):
    root: List[TagScoreObject]


class TagSynonym(BaseModel):
    applied_count: Optional[int] = None
    creation_date: Optional[int] = None
    from_tag: Optional[str] = None
    last_applied_date: Optional[int] = None
    to_tag: Optional[str] = None


class TagSynonyms(RootModel[List[TagSynonym]]):
    root: List[TagSynonym]


class LastBodyEditor(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class LastExcerptEditor(BaseModel):
    accept_rate: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    display_name: Optional[str] = None
    link: Optional[str] = None
    profile_image: Optional[str] = None
    reputation: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None


class TagWiki(BaseModel):
    body: Optional[str] = None
    body_last_edit_date: Optional[int] = None
    excerpt: Optional[str] = None
    excerpt_last_edit_date: Optional[int] = None
    last_body_editor: Optional[LastBodyEditor] = None
    last_excerpt_editor: Optional[LastExcerptEditor] = None
    tag_name: Optional[str] = None


class TagWikis(RootModel[List[TagWiki]]):
    root: List[TagWiki]


class Tag(BaseModel):
    count: Optional[int] = None
    has_synonyms: Optional[bool] = None
    is_moderator_only: Optional[bool] = None
    is_required: Optional[bool] = None
    last_activity_date: Optional[int] = None
    name: Optional[str] = None
    synonyms: Optional[List] = None
    user_id: Optional[int] = None


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class TopTagObject(BaseModel):
    answer_count: Optional[int] = None
    answer_score: Optional[int] = None
    question_count: Optional[int] = None
    question_score: Optional[int] = None
    tag_name: Optional[str] = None
    user_id: Optional[int] = None


class TopTagObjects(RootModel[List[TopTagObject]]):
    root: List[TopTagObject]


class User4(BaseModel):
    about_me: Optional[str] = None
    accept_rate: Optional[int] = None
    account_id: Optional[int] = None
    age: Optional[int] = None
    answer_count: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    creation_date: Optional[int] = None
    display_name: Optional[str] = None
    down_vote_count: Optional[int] = None
    is_employee: Optional[bool] = None
    last_access_date: Optional[int] = None
    last_modified_date: Optional[int] = None
    link: Optional[str] = None
    location: Optional[str] = None
    profile_image: Optional[str] = None
    question_count: Optional[int] = None
    reputation: Optional[int] = None
    reputation_change_day: Optional[int] = None
    reputation_change_month: Optional[int] = None
    reputation_change_quarter: Optional[int] = None
    reputation_change_week: Optional[int] = None
    reputation_change_year: Optional[int] = None
    timed_penalty_date: Optional[int] = None
    up_vote_count: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None
    view_count: Optional[int] = None
    website_url: Optional[str] = None


class UserTimelineObject(BaseModel):
    badge_id: Optional[int] = None
    comment_id: Optional[int] = None
    creation_date: Optional[int] = None
    detail: Optional[str] = None
    link: Optional[str] = None
    post_id: Optional[int] = None
    post_type: Optional[str] = None
    suggested_edit_id: Optional[int] = None
    timeline_type: Optional[str] = None
    title: Optional[str] = None
    user_id: Optional[int] = None


class UserTimelineObjects(RootModel[List[UserTimelineObject]]):
    root: List[UserTimelineObject]


class User5(BaseModel):
    about_me: Optional[str] = None
    accept_rate: Optional[int] = None
    account_id: Optional[int] = None
    age: Optional[int] = None
    answer_count: Optional[int] = None
    badge_counts: Optional[BadgeCounts] = None
    creation_date: Optional[int] = None
    display_name: Optional[str] = None
    down_vote_count: Optional[int] = None
    is_employee: Optional[bool] = None
    last_access_date: Optional[int] = None
    last_modified_date: Optional[int] = None
    link: Optional[str] = None
    location: Optional[str] = None
    profile_image: Optional[str] = None
    question_count: Optional[int] = None
    reputation: Optional[int] = None
    reputation_change_day: Optional[int] = None
    reputation_change_month: Optional[int] = None
    reputation_change_quarter: Optional[int] = None
    reputation_change_week: Optional[int] = None
    reputation_change_year: Optional[int] = None
    timed_penalty_date: Optional[int] = None
    up_vote_count: Optional[int] = None
    user_id: Optional[int] = None
    user_type: Optional[str] = None
    view_count: Optional[int] = None
    website_url: Optional[str] = None


class Users(RootModel[List[User5]]):
    root: List[User5]


class WritePermission(BaseModel):
    can_add: Optional[bool] = None
    can_delete: Optional[bool] = None
    can_edit: Optional[bool] = None
    max_daily_actions: Optional[int] = None
    min_seconds_between_actions: Optional[int] = None
    object_type: Optional[str] = None
    user_id: Optional[int] = None


class WritePermissions(RootModel[List[WritePermission]]):
    root: List[WritePermission]


class Order(Enum):
    desc = 'desc'
    asc = 'asc'


class Sort(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort4(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort6(Enum):
    rank = 'rank'
    name = 'name'
    type = 'type'


class Sort8(Enum):
    rank = 'rank'
    name = 'name'


class Sort12(Enum):
    rank = 'rank'
    name = 'name'
    type = 'type'


class Sort14(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort18(Enum):
    reputation = 'reputation'
    creation = 'creation'
    name = 'name'
    modified = 'modified'


class Sort20(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort22(Enum):
    rank = 'rank'
    name = 'name'
    type = 'type'


class Sort24(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort28(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    added = 'added'


class Sort30(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort32(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort42(Enum):
    creation = 'creation'
    approval = 'approval'
    rejection = 'rejection'


class Sort44(Enum):
    popular = 'popular'
    activity = 'activity'
    name = 'name'


class Sort46(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort48(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    hot = 'hot'
    week = 'week'
    month = 'month'
    relevance = 'relevance'


class Sort50(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort54(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort56(Enum):
    creation = 'creation'
    approval = 'approval'
    rejection = 'rejection'


class Sort58(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    hot = 'hot'
    week = 'week'
    month = 'month'
    relevance = 'relevance'


class Sort60(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort70(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort72(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    rank = 'rank'


class Sort76(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    relevance = 'relevance'


class Accepted(Enum):
    True_ = True
    False_ = False


class Closed(Enum):
    True_ = True
    False_ = False


class Migrated(Enum):
    True_ = True
    False_ = False


class Notice1(Enum):
    True_ = True
    False_ = False


class Wiki(Enum):
    True_ = True
    False_ = False


class Sort82(Enum):
    creation = 'creation'
    approval = 'approval'
    rejection = 'rejection'


class Sort86(Enum):
    popular = 'popular'
    activity = 'activity'
    name = 'name'


class Sort92(Enum):
    creation = 'creation'
    applied = 'applied'
    activity = 'activity'


class Sort94(Enum):
    popular = 'popular'
    activity = 'activity'
    name = 'name'


class Sort96(Enum):
    creation = 'creation'
    applied = 'applied'
    activity = 'activity'


class Period(Enum):
    all_time = 'all_time'
    month = 'month'


class Sort98(Enum):
    reputation = 'reputation'
    creation = 'creation'
    name = 'name'
    modified = 'modified'


class Sort106(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort108(Enum):
    rank = 'rank'
    name = 'name'
    type = 'type'
    awarded = 'awarded'


class Sort110(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort114(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
    added = 'added'


class Sort116(Enum):
    creation = 'creation'
    votes = 'votes'


class Sort118(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'


class Sort128(Enum):
    creation = 'creation'
    approval = 'approval'
    rejection = 'rejection'


class Sort130(Enum):
    popular = 'popular'
    activity = 'activity'
    name = 'name'


class Sort132(Enum):
    activity = 'activity'
    creation = 'creation'
    votes = 'votes'
